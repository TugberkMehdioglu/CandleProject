// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4d7b3bc1-f3aa-48ce-b587-5e7dc5557634",
                            ConcurrencyStamp = "205ef380-37cc-4485-89b9-992edfc4d505",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4d7b3bc1-f3aa-48ce-b587-5e7dc5553134",
                            ConcurrencyStamp = "20b31218-037a-4e4b-a692-cdbb0a0f39d0",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5c8defd5-91f2-4256-9f16-e7fa7546dec4",
                            RoleId = "4d7b3bc1-f3aa-48ce-b587-5e7dc5557634"
                        },
                        new
                        {
                            UserId = "5c8defd5-91f2-4256-9f16-e7fa7546fec5",
                            RoleId = "4d7b3bc1-f3aa-48ce-b587-5e7dc5553134"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AptNo")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Flat")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserProfileID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserProfileID = "5c8defd5-91f2-4256-9f16-e7fa7546dec4",
                            AptNo = 11,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 79, DateTimeKind.Local).AddTicks(3191),
                            District = "Kağıthane",
                            Flat = (byte)8,
                            Name = "Ev",
                            Neighborhood = "Çeliktepe",
                            Status = 1,
                            Street = "ŞaşatuŞalat"
                        },
                        new
                        {
                            Id = 2,
                            AppUserProfileID = "5c8defd5-91f2-4256-9f16-e7fa7546dec4",
                            AptNo = 7,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 79, DateTimeKind.Local).AddTicks(3196),
                            District = "Beşiktaş",
                            Name = "İş Yeri",
                            Neighborhood = "Nispetiye",
                            Status = 1,
                            Street = "Aydın"
                        },
                        new
                        {
                            Id = 3,
                            AppUserProfileID = "5c8defd5-91f2-4256-9f16-e7fa7546fec5",
                            AptNo = 9,
                            City = "İstanbul",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 79, DateTimeKind.Local).AddTicks(3198),
                            District = "Ataşehir",
                            Name = "Ev",
                            Neighborhood = "Küçükbakkalköy",
                            Status = 1,
                            Street = "Rüya"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5c8defd5-91f2-4256-9f16-e7fa7546dec4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11a75701-187b-4944-873a-0db49d99d66c",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 79, DateTimeKind.Local).AddTicks(4531),
                            Email = "Admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEn/RAVdV8626ZngvMzCG2+uZErFrA41JKuDyx5UorxRezONkHnwEb0vGwTMKWVhwg==",
                            PhoneNumber = "5312292928",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d0827e8e-79bf-4230-bf72-3ab2933657c8",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "5c8defd5-91f2-4256-9f16-e7fa7546fec5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c83dfd7-fe0e-494a-be52-090335450e0d",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 79, DateTimeKind.Local).AddTicks(4554),
                            Email = "Member@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MEMBER@GMAIL.COM",
                            NormalizedUserName = "MEMBER",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/sXA/np5YJMAY+pSCt5oUP7kSfNcweSV0ay4XATmzdsGAIUJbp67lhEm2U5Lv0Og==",
                            PhoneNumber = "5446340539",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9a0aab12-74cb-4275-b9f9-8fdf2f028b1c",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Member"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppUserProfiles");

                    b.HasData(
                        new
                        {
                            Id = "5c8defd5-91f2-4256-9f16-e7fa7546dec4",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(4541),
                            FirstName = "Tuğberk",
                            LastName = "Mehdioğlu",
                            Status = 1
                        },
                        new
                        {
                            Id = "5c8defd5-91f2-4256-9f16-e7fa7546fec5",
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(4545),
                            FirstName = "Dilan",
                            LastName = "Polat",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(4938),
                            Name = "Oda Kokusu & Mum",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(4940),
                            Name = "Difüzör",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(4941),
                            Name = "Ev Parfümü",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("AppUserProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressID");

                    b.HasIndex("AppUserProfileID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Quentity")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6241),
                            ImagePath = "Dr.VranjesFirenze.jpg",
                            ProductId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6244),
                            ImagePath = "AtelierRebul.jpg",
                            ProductId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6245),
                            ImagePath = "LeatherOud100mlDifüzör.jpg",
                            ProductId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6246),
                            ImagePath = "5pnyh3oo.g0a_IMG_01_2110095020048.jpg",
                            ProductId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6248),
                            ImagePath = "qsbkczrj.lq0_IMG_01_2110089386044.jpg",
                            ProductId = 5,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6271),
                            ImagePath = "kh1gwhxa.2uh_IMG_01_2110089385948.jpg",
                            ProductId = 6,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6272),
                            ImagePath = "ptowbl3w.zkq_MP_1b565ca5-4923-4c99-9313-e81502939778_1_43487206954810324050030543535_563.jpg",
                            ProductId = 7,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6273),
                            ImagePath = "x5p2g5gu.4fw_IMG_01_3700559608067.jpg",
                            ProductId = 8,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6274),
                            ImagePath = "ihlf3u2z.vwy_IMG_01_8691226631783.jpg",
                            ProductId = 9,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6275),
                            ImagePath = "rblnyed2.jvf_IMG_02_2110095020048.jpg",
                            ProductId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6276),
                            ImagePath = "vb0cwnjy.qfj_IMG_03_2110095020048.jpg",
                            ProductId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6277),
                            ImagePath = "0fbp5mpz.kbk_IMG_05_8691226631783.jpg",
                            ProductId = 9,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6278),
                            ImagePath = "q5hq1lxg.y3y_IMG_03_8691226631783.jpg",
                            ProductId = 9,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6279),
                            ImagePath = "3334.jpg",
                            ProductId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6280),
                            ImagePath = "fpzkb4bw.di1_IMG_03_3700559608067.jpg",
                            ProductId = 8,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6281),
                            ImagePath = "iz2behpe.ci3_IMG_02_3700559608067.jpg",
                            ProductId = 8,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<short>("Stock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6794),
                            Description = "Oud Nobile Sprey Cam Şişe Koku 100 ml",
                            Name = "Dr. Vranjes Firenze",
                            Price = 1199m,
                            Status = 1,
                            Stock = (short)60
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6800),
                            Description = "Bereket Çubuklu Oda Kokusu 200ml",
                            Name = "Atelier Rebul",
                            Price = 1249m,
                            Status = 1,
                            Stock = (short)5
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6802),
                            Description = "Leather Oud 100 ml Difüzör",
                            Name = "Dr. Vranjes Firenze",
                            Price = 1199m,
                            Status = 1,
                            Stock = (short)30
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6803),
                            Description = "Ginger Lime 2500 ml Difüzör",
                            Name = "Dr. Vranjes Firenze",
                            Price = 8950m,
                            Status = 1,
                            Stock = (short)80
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6804),
                            Description = "Penelope Refill 500 ml Oda Kokusu",
                            Name = "Etro",
                            Price = 1249m,
                            Status = 1,
                            Stock = (short)43
                        },
                        new
                        {
                            Id = 6,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6806),
                            Description = "Eos 100 ml Oda Kokusu",
                            Name = "Etro",
                            Price = 1449m,
                            Status = 1,
                            Stock = (short)100
                        },
                        new
                        {
                            Id = 7,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6808),
                            Description = "Bubble Mor Pembe ve Su Yeşili 3'lü Mum Seti",
                            Name = "Lagom Candle",
                            Price = 1280m,
                            Status = 1,
                            Stock = (short)8
                        },
                        new
                        {
                            Id = 8,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6809),
                            Description = "Baccarat Rouge 540 Kokulu Mum 280 gr",
                            Name = "Maison Francis Kurkdjian",
                            Price = 4590m,
                            Status = 1,
                            Stock = (short)24
                        },
                        new
                        {
                            Id = 9,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 1, 29, 13, 37, 8, 81, DateTimeKind.Local).AddTicks(6810),
                            Description = "İstanbul Çubuklu Oda Kokusu 2500ml",
                            Name = "Atelier Rebul",
                            Price = 10250m,
                            Status = 1,
                            Stock = (short)18
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Address", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUserProfile", "AppUserProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("AppUserProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithOne("AppUserProfile")
                        .HasForeignKey("Project.ENTITIES.Models.AppUserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUserProfile", "AppUserProfile")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserProfileID");

                    b.Navigation("Address");

                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Photo", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
